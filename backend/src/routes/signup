const express = require('express');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const bcrypt = require('bcryptjs');
const router = express.Router();

/**
 * @swagger
 * components:
 *   schemas:
 *     SignUpRequest:
 *       type: object
 *       required:
 *         - username
 *         - password
 *       properties:
 *         username:
 *           type: string
 *           description: Il nome utente da registrare
 *         password:
 *           type: string
 *           description: La password dell'utente
 *       example:
 *         username: newuser
 *         password: password123
 *     SignUpResponse:
 *       type: object
 *       properties:
 *         message:
 *           type: string
 *           description: Messaggio di successo
 *       example:
 *         message: "Registrazione riuscita"
 */

/**
 * @swagger
 * /api/sign-up:
 *   post:
 *     summary: Registra un nuovo utente
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/SignUpRequest'
 *     responses:
 *       201:
 *         description: Utente registrato con successo
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/SignUpResponse'
 *       400:
 *         description: Utente già esistente
 *       500:
 *         description: Errore del server
 */


// Registrazione dell'utente
router.post("/", async (req, res) => {
  const { username, password } = req.body;

  try {

    //cerca nella collezione del db un elemento corrispondente al modello User, mappato su MongoDB
    let user = await User.findOne({ username }); 
    if (user) {
      return res.status(400).json({ message: 'Utente già esistente' });
    }

    user = new User({ username, password });
    await user.save();
    res.status(201).json({ message: 'Registrazione riuscita' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Errore del server' });
  }
});

module.exports = router;
